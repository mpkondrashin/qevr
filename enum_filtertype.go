// Code generated by enum (github.com/mpkondrashin/enum) using following command:
// enum -type=FilterType -names=NoFilter,Include,Exclude
// DO NOT EDIT!

package main

import (
    "encoding/json"
    "errors"
    "fmt"
    "strconv"
    "strings"
)

type FilterType int

const (
    FilterTypeNoFilter FilterType = iota
    FilterTypeInclude  FilterType = iota
    FilterTypeExclude  FilterType = iota
)



// MapFilterTypeToString - map FilterType to string
var MapFilterTypeToString = map[FilterType]string {
    FilterTypeNoFilter: "NoFilter",
    FilterTypeInclude:  "Include",
    FilterTypeExclude:  "Exclude",
}

// String - return string representation for FilterType value
func (v FilterType)String() string {
    s, ok := MapFilterTypeToString[v]
    if ok {
        return s
    }
    return "FilterType(" + strconv.FormatInt(int64(v), 10) + ")"
}

// ErrUnknownFilterType - will be returned wrapped when parsing string
// containing unrecognized value.
var ErrUnknownFilterType = errors.New("unknown FilterType")

 // MapFilterTypeFromString - map string to FilterType value
var MapFilterTypeFromString = map[string]FilterType{
    "nofilter":    FilterTypeNoFilter,
    "include":    FilterTypeInclude,
    "exclude":    FilterTypeExclude,
}

// UnmarshalJSON implements the Unmarshaler interface of the json package for FilterType.
func (s *FilterType) UnmarshalJSON(data []byte) error {
    var v string
    if err := json.Unmarshal(data, &v); err != nil {
        return err
    }
    result, ok := MapFilterTypeFromString[strings.ToLower(v)]
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownFilterType, v)
    }
    *s = result
    return nil
}

// MarshalJSON implements the Marshaler interface of the json package for FilterType.
func (s FilterType) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf("\"%v\"", s)), nil
}

// UnmarshalYAML implements the Unmarshaler interface of the yaml.v3 package for FilterType.
func (s *FilterType) UnmarshalYAML(unmarshal func(interface{}) error) error {
    var v string
    if err := unmarshal(&v); err != nil {
        return err
    }
    result, ok := MapFilterTypeFromString[strings.ToLower(v)]  
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknownFilterType, v)
    }
    *s = result
    return nil
}


// MarshalYAML implements the Marshaler interface of the yaml.v3 package for FilterType.
func (s FilterType) MarshalYAML() (interface{}, error) {
    return s.String(), nil
}
